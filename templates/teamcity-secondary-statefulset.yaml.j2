apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ teamcity['app_name'] }}-secondary"
  namespace: "{{ teamcity['namespace'] }}"
  labels:
    app: "{{ teamcity['app_name'] }}"
    node: "secondary"
spec:
  replicas: {{ teamcity['secondary_nodes_replicas'] }}
  selector:
    matchLabels:
      app: "{{ teamcity['app_name'] }}"
      node: "secondary"
  serviceName: "{{ teamcity['app_name'] }}-secondary"
  template:
    metadata:
      labels:
        app: "{{ teamcity['app_name'] }}"
        node: "secondary"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - "{{ teamcity['app_name'] }}"
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: wait-for-primary
          image: curlimages/curl
          command:
            - "sh"
            - "-c"
            - "sh /wait-for-200.sh {{ teamcity['app_name'] }}-0.{{ teamcity['app_name'] }}:8111/login.html"
          volumeMounts:
            - mountPath: "/wait-for-200.sh"
              name: initscripts
              subPath: wait-for-200.sh
      containers:
        - name: teamcity
          image: "{{ teamcity['image'] }}"
          env:
            - name: TEAMCITY_SERVER_MEM_OPTS
              value: "{{ teamcity['server_mem_opts'] }}"
            - name: TEAMCITY_SERVER_OPTS
              value: >-
                -Dteamcity.caches.path=/tmp/teamcity
                -Dteamcity.startup.maintenance=false
                -Dteamcity.server.nodeId=$HOSTNAME
                -Dteamcity.node.data.path=/tmp/teamcity/node-data
                -Dteamcity.server.rootURL=http://{{ teamcity['app_name'] }}.{{ teamcity['namespace'] }}.svc
          ports:
            - name: teamcity
              containerPort: 8111
          resources:
            requests:
              cpu: "{{ teamcity['resources_requests']['cpu'] }}"
              memory: "{{ teamcity['resources_requests']['memory'] }}"
            limits:
              cpu: "{{ teamcity['resources_limits']['cpu'] }}"
              memory: "{{ teamcity['resources_limits']['memory'] }}"
          readinessProbe:
            httpGet:
              path: /login.html
              port: 8111
            initialDelaySeconds: 180
            periodSeconds: 2
            timeoutSeconds: 10
            failureThreshold: 2
            successThreshold: 2
          volumeMounts:
            - mountPath: "/tmp/teamcity"
              name: cache
            - mountPath: "/opt/teamcity/temp"
              name: temp
            - mountPath: "/opt/teamcity/logs"
              name: logs
            - mountPath: "/tmp/teamcity/node-data"
              name: node-data-path
            - mountPath: /data/teamcity_server/datadir/config/database.properties
              name: dbproperties
              subPath: database.properties
              readOnly: true
            - mountPath: "/data/teamcity_server/datadir"
              name: datadir
      volumes:
        - name: cache
          emptyDir: {}
        - name: temp
          emptyDir: {}
        - name: logs
          emptyDir: {}
        - name: addon-download
          emptyDir: {}
        - name: node-data-path
          emptyDir: {}
        - name: dbproperties
          secret:
            secretName: "{{ teamcity['app_name'] }}-secret-mysql"
        - name: initscripts
          configMap:
            name: "{{ teamcity['app_name'] }}-cm-init"
        - name: datadir
          persistentVolumeClaim:
            claimName: "{{ teamcity['app_name'] }}-pvc-nfs"
